class IntervalLoopInfo {
    constructor (loop) {
        this.loop = loop;
        this.Clients = {};
    }

    addClient (client, interval) {
        if (this.Clients[client]) {
            clearInterval(this.Clients[client]);
        }

        var id = setInterval(_ => {
            if (client.ws.readyState == 3) {clearInterval(id);}
            var result = this.loop.info;
            result.queue = this.loop.loop.length
            client.send({ event: "info-loop", data: result });
        }, interval);
        this.Clients[client] = id;
        return id;
    }
}

function iloop(event, loop) {
    const Clients = event.Clients;
    const Path    = `${Clients.path}/common/Json/help`;
    const Data    = event.data.data;

    if (typeof Data.interval === 'number' || typeof Data.interval === 'string') {
        if (Data.interval == 0 && loop.intervalloopinfo) {
            clearInterval(loop.intervalloopinfo.Clients[Clients]);
            return { data: { interval: 'delete' } };
        }
        if (Data.interval < 150) {
            return { error: `L'interval doit être de minimum 150ms` };
        }
        var interval  = Data.interval;
    } else {
        return { error: `L'element "interval", n'a pas été trouvé` };
    }

    if (typeof loop.intervalloopinfo === 'undefined') {
        loop.intervalloopinfo = new IntervalLoopInfo(loop);
    }
    loop.intervalloopinfo.addClient(Clients, interval);

    return { data: { interval: interval } };
}

exports.info = {
    'info-loop': {
        func: iloop,
        version: "0.0.0.9"
    }
}