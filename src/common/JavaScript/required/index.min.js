const { WebSocket } = require('./webSocket.min.js');
const { Client }    = require('./Clients.min.js');
const { Loop }      = require('./loop.min.js');

class _Clients {
        /**
     * @param {WebSocket.WebSocket} ws 
     * @param {String} path 
     * @param {String} key 
     * @param {Logs} logs
     */
        constructor (ws, path, key, logs) {}
    
        /**
         * @param {Json} data 
         */
        send (data) {}
}

class setup {
    /**
     * @param {String} path 
     * @param {Logs} logs 
     */
    constructor (path, logs) {
        this.path = path;
        this.logs = logs;
    }

    /**
     * @param {Number} port 
     */
    async init (port) {
        this.webSocket = new WebSocket(this.path);

        this.logs.debug(`Configuration du websocket sur le port ${port}`);
        this.Options_webSocket = this.webSocket.init({ port: port });

        this.logs.debug('Configuration de la clef de cryptage');
        this.key = `123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`

        this.logs.info('Creation de la boucle (pour traiter les information)');
        this.Loop = new Loop(this.path, this.logs);

        this.logs.info('Demarage du websocket');
        var webSocket = await this.start_ws();
        this.logs.info(`Le websocket a bien été créer sur le port ${port}`);

        webSocket.on('connection', ws => {
            this.logs.info('Un nouvelle utilisteur vient de ce connecter');
            this.on_connect(ws);
        })
    }

    /**
     * 
     * @returns {Promise<WebSocket.WebSocket>}
     */
    start_ws() {
        return new Promise(resolve => {
            var result = this.webSocket.start();
            if (!result) {
                return this.start_ws();
            }
            return resolve(result);
        })
    }

    on_connect (ws) {
        var Clients = new Client(ws, this.path, this.key, this.logs);

        Clients.send({ event: 'hello' });

        ws.on('message', message => {
            this.logs.debug(`Un message vient d'être reçu`);
            var data = Clients.message(message);
            
            if(!data){return}
            
            if (!data.event) {
                return Clients.send({ event: "error", data: { message: "No event" } });
            }
            
            var id = this.Loop.add(data, Clients);
            Clients.send({ event: 'pending', data: { id: data.id, uid: id } });
        });
    }
}

exports.setup = setup;