const { Events } = require('./events.min.js');

class Loop {
    /**
     * @param {String} path 
     * @param {Logs} logs 
     */
    constructor (path, logs) {
        this.path = path;
        this.logs = logs;
        this.uid  = 0;
        this.loop = [];
        this.started = false;
        this.info = {};
        this.events = new Events(this.path);

        this.events.check();
    }

    /**
     * @param {Json} event 
     * @returns {Promise<Json>}
     */
    event(event) {
        return new Promise(async (resolve, reject) => {
            event.Clients.send({ event: 'working', data: { uid: event.uid } });
            var _event = event.data.event;
            if (_event == 'check-modules') {
                try {
                    this.events.check();
                } catch {
                    return reject({ error: 'Verification des modules echouer' });
                }
                return resolve({ data: { check: true } });
            }
            var callback = this.events.run(_event);
            if (!callback) {
                return reject({ error: 'Event inconue' });
            }

            try {
                var result = callback(event, this);
            } catch {
                return reject({ error: 'Une erreur est survenue avec cet event'});
            }
            if (!result) {
                return reject({error: 'Error inconue'})
            }
            if (typeof result.error != 'undefined') {
                return reject(result);
            } else {
                return resolve(result);
            }
        });
    }

    /**
     * @param {Json} event
     * @returns {Promise<void>}
     */
    async a(event) {
        this.loop.shift();
        await this.event(event).then(_ => {
            return event.Clients.send({ event: "success", data: { event: event.data.event, data: _.data, uid: event.uid } });
        }).catch(_ => {
            return event.Clients.send({ event: "error", data: { event: event.data.event, error: _.error, uid: event.uid } });
        });
    }

    i(){
        if (typeof this.info.elements === 'undefined') {
            this.info.elements = 0;
        } else {
            this.info.elements += 1;
        }

        var time = Math.floor(new Date().getTime()/1000);
        if (this.info.time != time) {
            this.info.time = time;
            this.info.final = (this.loop.length / this.info.elements);
            this.info.elements = 0;
        }
    }

    /**
     * @returns {Promise<void>}
     */
    async start() {
        if (this.started) { return }
        this.started = true;
        while (this.loop.length != 0) {
            await this.a(this.loop[0]);
            this.i();
        }
        this.started = false;
    }

    /**
     * @param {Json} data 
     * @param {Clients} Clients 
     * @returns {Number}
     */
    add(data, Clients) {
        this.uid += 1;
        this.loop.push({
            Clients: Clients,
            data: data,
            uid: this.uid
        });
        setTimeout(_=>{this.start()}, 10);
        return this.uid;
    }
}

exports.Loop = Loop;