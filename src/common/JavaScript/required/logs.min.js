const { exit } = require('process');
const fs = require('fs');

class Logs {
    /**
     * @param {String} p
     */
    constructor (p) {
        this.path = p;
    }

    /**
     * @param {String} t 
     */
    s(t) {
        if (!fs.existsSync(`${this.path}/Logs/`)) {
            fs.mkdirSync(`${this.path}/Logs/`, { recursive: true });
        }

        let date = new Date();

        fs.appendFileSync(`${this.path}/Logs/Log ${date.getDate()}-${date.getMonth()}-${date.getFullYear()}.txt`, t+'\n');
    }

    /**
     * @param {Number} l 
     * @param {String} t 
     */
    p(l,t) {
        const level = {5: 'CRITICAL', 4: 'ERROR', 3: 'WARNING', 2: 'INFO', 1: 'DEBUG'};
        let date = new Date();

        var content = `[${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} ${level[l]}]: ${t}`;

        console.log(content);
        if (l > 1) {
            this.s(content);
        }
        if (l == 5) {
            exit()
        }
    }

    /**
     * @param {String} text 
     */
    critical(text) {
        this.p(5, text);
    }

    /**
     * @param {String} text 
     */
    error(text) {
        this.p(4, text);
    }

    /**
     * @param {String} text 
     */
    warning(text) {
        this.p(3, text);
    }

    /**
     * @param {String} text 
     */
    info(text) {
        this.p(2, text);
    }

    /**
     * @param {String} text 
     */
    debug(text) {
        this.p(1, text);
    }
}

exports.logs = Logs;